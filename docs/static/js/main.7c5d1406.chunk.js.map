{"version":3,"sources":["Componentes/Header.js","Componentes/Formulario.js","Helpers.js","Componentes/Mensaje.js","Componentes/Resultado.js","Componentes/Spinner.js","App.js","reportWebVitals.js","index.js"],"names":["Header","title","Formulario","props","quantity","saveQuantity","term","saveTerm","saveTotal","saveLoading","useState","error","saveError","onSubmit","e","preventDefault","setTimeout","total","totalQuantity","totalTerm","calculateTotal","className","type","placeholder","onChange","parseInt","target","value","Mensaje","Resultado","toFixed","Spinner","App","component","loading","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c5d1406.chunk.js","sourcesContent":["import React, {Fragment} from 'react';\n\n\nfunction Header({title}) {   // las {} hace que aplique destructuring eso creara la variable de title y extrae su valor\n\n    \n    // ({}) dentro de las llaves el codigo se representa como Js\n    return(\n        <Fragment>\n            <h1>{ title }</h1>   \n        </Fragment>\n    )\n}\n\n// const Header = ({title}) => (   // una forma mas implicita y facilita hacer un codigo, pero si vas a crear mas codigo en la variable ahi usamos las {} y el return\n//     <h1>{ title }</h1>\n// )\n \n\n\nexport default Header;\n\n","import React, {Fragment, useState} from 'react'; // (usestate) hace mas rapido las applicaciones que trabajan con react\nimport { calculateTotal } from '../Helpers';\n\n\nconst Formulario = (props) => {\n\n    const {quantity, saveQuantity, term, saveTerm, saveTotal, saveLoading} = props;\n\n    // definir state\n    const [error, saveError] = useState(false)\n\n    //cuando el usiario hace submit\n    const calculateLoan = (e) => {\n        e.preventDefault();\n\n        // validar\n        if( quantity === 0 || term === '') {\n            saveError(true);\n            return;\n        }\n\n        //eliminar error previo\n        saveError(false); \n        \n        // habilitar spinner\n        saveLoading(true);\n\n        setTimeout(() => {\n            // relizar la cotizacion\n            const total = calculateTotal(quantity, term);\n\n            // ya calculado se pasa el total\n            saveTotal(total);   \n            \n            // deshabilitar spinner\n            saveLoading(false);\n        }, 3000);\n\n    }\n\n    \n    return ( \n        <Fragment>\n            <form onSubmit={calculateLoan}>\n                <div className=\"row\">\n                        <div>\n                            <label>Cantidad Prestamo</label>\n                            <input \n                                className=\"u-full-width\" \n                                type=\"number\" \n                                placeholder=\"Ejemplo: 3000\" \n                                onChange={ e => saveQuantity( parseInt(e.target.value) ) }  // (onChange) es un evento que se va a ejecutar cada vez que el usuario interactue con la app\n                            />\n                        </div>\n                        <div>\n                            <label>Plazo para Pagar</label>\n                            <select \n                                className=\"u-full-width\"\n                                onChange={ e => saveTerm( parseInt(e.target.value) ) }\n                            >\n                                <option value=\"\">Seleccionar</option>\n                                <option value=\"3\">3 meses</option>\n                                <option value=\"6\">6 meses</option>\n                                <option value=\"12\">12 meses</option>\n                                <option value=\"24\">24 meses</option>\n                            </select>\n                        </div>\n                        <div>\n                            <input \n                                type=\"submit\" \n                                value=\"Calcular\" \n                                className=\"button-primary u-full-width\" \n                            />\n                        </div>\n                </div>\n            </form>\n\n            { (error) ? <p className=\"error\">All fields are Required</p> : null }\n            \n\n        </Fragment>\n     );\n}\n \n\n\nexport default Formulario;","export function calculateTotal(quantity, term) {\n\n    let totalQuantity;\n    if(quantity <= 1000) {\n        totalQuantity = quantity * .25;\n    } else if( quantity > 1000 && quantity <= 5000) {\n        totalQuantity = quantity * .20;\n    } else if( quantity > 5000 && quantity <= 10000) {\n        totalQuantity = quantity * .15;\n    } else {\n        totalQuantity = quantity * .10;\n    }\n\n    \n\n    // calcular plazo\n    let totalTerm;\n    switch(term) {\n        case 3: \n            totalTerm = quantity * .05;\n            break;\n        case 6: \n            totalTerm = quantity * .10;\n            break;\n        case 12: \n            totalTerm = quantity * .15;\n            break;\n        case 24: \n            totalTerm = quantity * .20;\n            break;\n        default:\n            break;    \n    }\n\n    return totalTerm + totalQuantity + quantity;\n} ","import React from 'react';\n\nconst Mensaje = () => (\n\n    <p>Agrega una cantidad y plazo a pagar para Cotizar</p>\n);\n \nexport default Mensaje;","import React from 'react';\n\nconst Resultado = ({total, term, quantity}) => (\n    <div className=\"u-full-width resultado\">\n        <h2>Resumen</h2>\n        <p>La cantidad solicitada es: $ {quantity}</p>\n        <p>A pagar en: {term} Meses</p>\n        <p>Pago mensual es de: $ { (total / term).toFixed(2) }</p>\n        <p>Total a pagar: $ {(total).toFixed(2)}</p>\n\n\n\n    </div>\n);\n \nexport default Resultado;","import React from 'react';\nimport './Spinner.css';\n\nconst Spinner = () => {\n    return ( \n        <div className=\"sk-cube-grid\">\n            <div className=\"sk-cube sk-cube1\"></div>\n            <div className=\"sk-cube sk-cube2\"></div>\n            <div className=\"sk-cube sk-cube3\"></div>\n            <div className=\"sk-cube sk-cube4\"></div>\n            <div className=\"sk-cube sk-cube5\"></div>\n            <div className=\"sk-cube sk-cube6\"></div>\n            <div className=\"sk-cube sk-cube7\"></div>\n            <div className=\"sk-cube sk-cube8\"></div>\n            <div className=\"sk-cube sk-cube9\"></div>\n        </div>\n   );\n}\n \nexport default Spinner;","import React, {Fragment, useState} from 'react';     // (frangment) es como un div pero no se muestra en lo que viene siendo el front end\nimport Header from './Componentes/Header';\nimport Formulario from './Componentes/Formulario';\nimport Mensaje from './Componentes/Mensaje';\nimport Resultado from './Componentes/Resultado';\nimport Spinner from './Componentes/Spinner';\n\nfunction App() {\n\n  // definir el state\n  const [quantity, saveQuantity] = useState(0);  \n  const [term, saveTerm] = useState('');  \n  const [total, saveTotal] = useState(0);  \n  const [loading, saveLoading] = useState(false);  \n\n  let component;\n  if( loading ) {\n    component = <Spinner />\n  } else if (total === 0) {\n    component = <Mensaje />\n  } else {\n    component = <Resultado \n                  total={total}\n                  term={term}\n                  quantity={quantity}\n                />\n  }\n\n  return (\n    <Fragment>\n        <Header \n          title=\"Prestamos\"\n        />\n        \n        <div className=\"container\">\n            <Formulario \n              quantity={quantity}\n              saveQuantity={saveQuantity}\n              term={term}\n              saveTerm={saveTerm}\n              saveTotal={saveTotal}\n              saveLoading={saveLoading}\n            />\n\n            <div className=\"mensajes\">\n              {component}  \n            </div>  \n            \n        </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}